Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]


class Solution {
public:
    void rotate(vector<int>& nums, int k) {
       
       int n=nums.size();
      vector<int> v;
      k=k%n;
    for(int i=n-k;i<n;i++)
    {
        v.push_back(nums[i]);
    }
    for(int i=0;i<n-k;i++)
    {
        v.push_back(nums[i]);
    }
    for(int i=0;i<v.size();i++)
    {
        nums[i]=v[i];
    }


        
    }
};

Leetcode Link ==> https://leetcode.com/problems/rotate-array/description/?envType=study-plan-v2&envId=top-interview-150

TimeComplexity ==> O(n)
SpaceComplexity ==> O(n) due to vector used for copying elements