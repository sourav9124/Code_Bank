Example 1:

Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]
Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).


//solution
int removeDuplicates(vector<int>& nums) {
      int n=nums.size();
      map<int,int> mp;
      for(int i=0;i<n;i++)
      {
        mp[nums[i]]++;
      }
      vector<int> v;

      map<int,int>::iterator it;

      for(it=mp.begin();it!=mp.end();it++)
      {
         if(it->second==1)
         {
            v.push_back(it->first);
         }
         else
         {
            v.push_back(it->first);
             v.push_back(it->first);
         }
      }
      int k=0;
      for(int i=0;i<v.size();i++)
      {
        nums[i]=v[i];
        k++;
      }
      return k;
}

LeetCode Link ==> https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/description/?envType=study-plan-v2&envId=top-interview-150
TimeComplexity => O(n);
Space Complexcity => O(n)